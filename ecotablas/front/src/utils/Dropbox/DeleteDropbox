// utils/dropbox.js

import { Dropbox } from "dropbox";

// Función para obtener el token de acceso desde el refresh token
export const getAccessToken = async () => {
  const refreshToken = localStorage.getItem("dropboxRefreshToken");
  if (!refreshToken) {
    throw new Error("No se obtuvo el refresh token de Dropbox.");
  }

  try {
    const response = await fetch("https://api.dropboxapi.com/oauth2/token", {
      method: "POST",
      headers: { "Content-Type": "application/x-www-form-urlencoded" },
      body: new URLSearchParams({
        grant_type: "refresh_token",
        refresh_token: refreshToken,
        client_id: import.meta.env.VITE_DROPBOX_CLIENT_ID,
        client_secret: import.meta.env.VITE_DROPBOX_CLIENT_SECRET,
      }),
    });

    if (!response.ok) {
      throw new Error("Error al obtener el access token.");
    }

    const data = await response.json();
    return data.access_token;
  } catch (error) {
    console.error("Error al conectar con Dropbox:", error);
    throw error;
  }
};



export const deleteFromDropbox = async (path) => {
    const accessToken = await getAccessToken();
    const dbx = new Dropbox({ accessToken });
  
    const fixedPath = path.startsWith("/") ? path : `/${path}`;
  
    try {
      // Verifica si el archivo existe antes de borrarlo
      await dbx.filesGetMetadata({ path: fixedPath });
  
      // Si existe, lo elimina
      await dbx.filesDeleteV2({ path: fixedPath });
  
      console.log("Archivo eliminado con éxito.");
    } catch (error) {
      if (
        error?.status === 409 &&
        error?.error?.error_summary?.includes("path_lookup/not_found")
      ) {
        console.warn("Archivo no encontrado en Dropbox, no se puede eliminar.");
        return;
      }
  
      console.error("Error eliminando el archivo de Dropbox:", error);
      throw error;
    }
  };